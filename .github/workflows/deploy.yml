name: Terraform CI/CD with Security & Cost Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # SECURITY SCANNING
  terraform-security-scan:
    name: 'Terraform Security Scan'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: TFSec Security Scan
        uses: aquasecurity/tfsec@main
        with:
          soft-fail: true  # Continue even if issues found

      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: true

  # COST ESTIMATION
  terraform-cost-estimation:
    name: 'Terraform Cost Estimation'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write  # Needed for PR comments
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      
      - name: Generate Cost Report
        run: |
          infracost breakdown --path . \
            --format table \
            --out-file infracost.txt
          cat infracost.txt

      - name: Post Cost to PR
        if: github.event_name == 'pull_request'
        uses: infracost/actions/comment@v2
        with:
          path: infracost.json
          behavior: update
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # TERRAFORM DEPLOYMENT (Your existing workflow)
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: [terraform-security-scan, terraform-cost-estimation]
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: "${{ secrets.AWS_REGION }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        continue-on-error: true
        run: terraform apply -auto-approve tfplan

      - name: Wait for testing (if successful)
        if: steps.apply.outcome == 'success'
        run: sleep 5m

      - name: Terraform Destroy (Success Path)
        if: always() && steps.apply.outcome == 'success'
        run: terraform destroy -auto-approve

      - name: Terraform Destroy (Failure Path)
        if: always() && steps.apply.outcome == 'failure'
        run: terraform destroy -auto-approve