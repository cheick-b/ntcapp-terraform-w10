name: Terraform CI/CD with Security & Cost Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # SECURITY SCANNING
  terraform-security-scan:
    name: 'Terraform Security Scan'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: TFSec Security Scan
        uses: aquasecurity/tfsec@v1.28.4
        with:
          soft-fail: true

      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12  # ‚Üê Proven working version
        with:
          directory: .
          skip_check: "CKV_AWS_378,CKV2_AWS_12,CKV_AWS_260,CKV_AWS_135,CKV_AWS_91,CKV_AWS_2"
          soft_fail: true

  # COST ESTIMATION
  terraform-cost-estimation:
    name: 'Terraform Cost Estimation'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Setup Infracost
        uses: infracost/actions/setup@v2

      - name: Generate Cost Report
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          # Generate JSON output
          infracost breakdown --path . --format json --out-file infracost.json
          
          # Show cost in logs
          infracost breakdown --path . --format table
          
          # Post comment to PR (only if it's a PR)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            infracost comment github --path infracost.json \
              --repo ${{ github.repository }} \
              --pull-request ${{ github.event.pull_request.number }} \
              --github-token ${{ secrets.GITHUB_TOKEN }} \
              --behavior update
          fi

  # TERRAFORM DEPLOYMENT
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: [terraform-security-scan, terraform-cost-estimation]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: "${{ secrets.AWS_REGION }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        continue-on-error: true
        run: terraform apply -auto-approve tfplan

      - name: Wait for testing (if successful)
        if: steps.apply.outcome == 'success'
        run: sleep 10m

      - name: Terraform Destroy (Success Path)
        if: always() && steps.apply.outcome == 'success'
        run: terraform destroy -auto-approve

      - name: Terraform Destroy (Failure Path)
        if: always() && steps.apply.outcome == 'failure'
        run: terraform destroy -auto-approve